# 1. Estructura del Archivo YAML
name: PWA CI/CD Workflow

# Configuración de los desencadenadores correctos (on:):
on:
  push:
    branches:
      - master
      - main
      - development
      - feature/* # Agregamos ramas de características
  pull_request:
    branches:
      - master
      - main
      - development
      - feature/*
  workflow_dispatch: # Opción para activación manual

# 2. Configuración del Entorno
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.X]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci # O npm install si no tienes package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

# 4. Etapa de Compilación
      - name: Build the project
        run: npm run build # Compila el proyecto

      # Guarda el artefacto de compilación
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3 # Actualiza a la versión 3
        with:
          name: build-artifact
          path: build/ # Ajusta la ruta según tu estructura de proyecto

# 5. Etapa de Pruebas (React)
      - name: Run unit tests
        run: npm test # Ejecuta las pruebas unitarias

      # Si deseas incluir pruebas de E2E con Cypress
      - name: Start the server
        run: npm start & # Inicia el servidor en segundo plano

      # Espera a que el servidor esté disponible
      - name: Wait for server
        run: |
          echo "Waiting for server to start..."
          sleep 10 # Espera 10 segundos para asegurarte de que el servidor esté listo

      - name: Run end-to-end tests
        run: npm run cypress:run # Asegúrate de que este comando esté configurado en tu package.json

      # Ejecución de pruebas de cobertura
      - name: Run tests with coverage
        run: npm test -- --coverage # Ejecuta las pruebas y genera un reporte de cobertura
