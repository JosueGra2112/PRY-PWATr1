# 1. Estructura del Archivo YAML
name: Flujo de Trabajo CI/CD PWA # Se define el nombre del flujo de trabajo

# Configuración de los desencadenadores correctos (on:)
on: 
  push: # Se activa cuando hay un push en el repositorio
    branches: # Ramas específicas donde se activa el flujo
      - master
      - main
      - development
      - feature/*
  pull_request: # Se activa cuando se crea un pull request
    branches: 
      - master
      - main
      - development
      - feature/*

  workflow_dispatch: # Permite activar manualmente el flujo de trabajo

# 2. Configuración del Entorno
jobs: 
  build: # Nombre del trabajo de construcción
    runs-on: ubuntu-latest # Especifica el sistema operativo en el que se ejecutará

    steps: # Pasos a ejecutar en el trabajo
      - name: Revisar código # Paso para revisar el código
        uses: actions/checkout@v2 # Acción para hacer checkout del código del repositorio

      - name: Configurar Node.js # Paso para configurar Node.js
        uses: actions/setup-node@v2 # Acción para configurar Node.js
        with:
          node-version: '18.x' # Versión de Node.js a utilizar

      - name: Caché de dependencias # Paso para cachear dependencias
        uses: actions/cache@v2 # Acción para cachear dependencias
        with:
          path: ~/.npm # Ruta del directorio de caché
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # Clave única para el caché
          restore-keys: | # Claves alternativas para restaurar el caché
            ${{ runner.os }}-node-

      - name: Instalar dependencias # Paso para instalar dependencias
        run: npm ci # Comando para instalar dependencias utilizando package-lock.json

# 4. Etapa de Compilación
      - name: Compilar el proyecto # Paso para compilar el proyecto
        run: npm run build # Comando para compilar el proyecto

      - name: Subir Artefactos de Compilación # Paso para subir artefactos generados
        uses: actions/upload-artifact@v3 # Acción para subir artefactos
        with:
          name: build-artifact # Nombre del artefacto
          path: build/ # Ruta del artefacto a subir

# 5. Etapa de Pruebas (React)
      - name: Ejecutar pruebas unitarias # Paso para ejecutar pruebas unitarias
        run: npm test # Comando para ejecutar pruebas unitarias

# 6. Pruebas de Cobertura
      - name: Ejecutar pruebas con cobertura # Paso para ejecutar pruebas con cobertura
        run: npm run test:coverage # Comando para ejecutar pruebas y generar un reporte de cobertura

      - name: Guardar reporte de cobertura # Subir el reporte de cobertura como artefacto
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage # Ruta del reporte de cobertura

# 7. Pruebas End-to-End (E2E)
      - name: Iniciar el servidor # Paso para iniciar el servidor
        run: npm start & # Inicia el servidor en segundo plano

      - name: Esperar al servidor # Paso para esperar que el servidor inicie
        run: |
          echo "Esperando a que el servidor inicie..." # Mensaje de espera
          sleep 10 # Espera 10 segundos para asegurarse de que el servidor esté listo

      - name: Ejecutar pruebas de extremo a extremo (E2E) # Paso para ejecutar pruebas E2E
        run: npm run cypress:run # Comando para ejecutar pruebas E2E con Cypress

# 8. Despliegue (opcional, requiere configuración adicional en Netlify/Vercel/Firebase)
      - name: Despliegue en Producción
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
        run: echo "Configura el despliegue aquí en tu servicio preferido como Netlify, Vercel o Firebase"
